6 7
299
-837
563
-985
316
380
13 1
18 1
14 2
17 6
18 3
1 6
7 5
12 3
-646
-801
-664
-856
307
-618
-267
-768
-341
589
954
-779
2 4
2 4
2 4
19 5
387
-833
-865
837
109
874
-979
-600
794
-35
-249
-853
164
-356
849
-972
26
-419
818
17 7
16 10
4 2
4 9
2 9
2 4
135
675
7 2
16 2
1 1
7 2
8 1
-764
692
-288
-736
-726
294
639
959
8 8
15 7
564
600
203
-425
349
-290
-625
-517
942
869
12
-719
235
-995
22
17 6
8 6
20 3
7 10
19 10
9 3
20 4
3 1
303
244
-48
5 2
7 2
-810
160
679
202
442
-530
-236
8 1
20 6
7 7
-35
205
846
-442
-975
-825
224
7 4
20 5
11 3
7 5
20 5
20 5
20 6
5 3
281
532
965
702
-70
7 3
19 3
8 2
0 0
#include <stdio.h>
#include <string.h>

long long A[201], DP[201][16][21];
void solve(int N, int M, int D) {
	memset(DP, 0, sizeof(DP));
	int i, j, k;
	long long tmp;
	DP[0][0][0] = 1;
	for(i = 1; i <= N; i++) {
		for(j = 0; j <= M; j++) {
			for(k = 0; k < D; k++) {
				tmp = (k+A[i])%D;
				if(tmp < 0) tmp += D;
				DP[i][j][k] += DP[i-1][j][k];
				if(j) {
					DP[i][j][k] += DP[i-1][j-1][tmp];
				}
			}
		}
	}
	printf("%lld\n", DP[N][M][0]);
}
int main() {
	int N, Q, D, M, i;
	int Case = 0;
	while(scanf("%d %d", &N, &Q) == 2) {
		if(N == 0 && Q == 0)	break;
		for(i = 1; i <= N; i++)
			scanf("%lld", &A[i]);
		printf("SET %d:\n", ++Case);
		for(i = 1; i <= Q; i++) {
			scanf("%d %d", &D, &M);
			printf("QUERY %d: ", i);
			solve(N, M, D);
		}
	}
    return 0;
}
